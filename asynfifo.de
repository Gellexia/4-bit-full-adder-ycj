// Code your design here
module asyncfifo(
                 write_clk                             ,//input write clock
                 read_clk                              ,//input read clock 
                 reset                                 ,//input reset
                 write_en                              ,//input write enable
                 read_en                               ,//input read enable
                 data_in                               ,//input data
                 mem_full                              ,//output memory full 
                 mem_empty                             ,//output memory empty
                 out                                    //output data
                 )                                     ;
  
  input		write_clk, read_clk, reset, write_en, read_en ;
  input 	[7:0] data_in		;
  output	mem_full, mem_empty	;
  output reg[7:0] out		;
  		
  reg		[7:0] mem [0:7]		;//8*8 memory
  reg		[2:0] write_ptr		;
  reg		[2:0] read_ptr		;
  reg		[3:0] count			;
  
  assign mem_full	=	(count == 8)	;
  assign mem_empty	=	(count == 4'b0)	;
  
  
  always @ (posedge write_clk or negedge reset)
    begin
      if(!reset)
        begin
          write_ptr <= 3'b0		;
        end
      else
        ////////
        if(write_en == 1 && !mem_full)
          begin
            mem[write_ptr]	<=	data_in				;
            write_ptr		<=	write_ptr + 1'b1	;
            
          end
    end
  
  
  always @ (posedge read_clk or negedge reset)
    begin
      if(!reset)
        begin
          read_ptr	<= 3'b0		;
        end
      else
        /////////
        if(read_en == 1 && !mem_empty)
          begin
            out			<= mem[read_ptr]	;
            read_ptr 	<= read_ptr + 1'b1	;
          end
    end
  
  
  always @ (posedge write_clk or posedge read_clk or negedge reset )
    begin
      if (!reset)
        count <= 4'b0						;
        else
          begin
            case({write_en, read_en})
              2'b10: count <= count + 1'b1	;
              2'b01: count <= count - 1'b1	;
              default: count <= count		;
            endcase
          end
    end
endmodule

            
      
            
          
