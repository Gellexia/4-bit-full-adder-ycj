module fourbit_full_adder
(
i_a,
i_b,
i_cin,
o_s,
o_c
);
  
  input  [3:0] i_a, i_b ;
  input i_cin	  	   ;
  output [3:0] o_s 		;
  output o_c 			;
  wire w_c1, w_c2, w_c3 ;
  
  full_adder 
  
  fa1(
    .i_a(i_a[0]),
    .i_b(i_b[0]),
    .i_cin(i_cin),
    .o_s(o_s[0]),
    .o_c(w_c1)
  ),
  
  fa2(
    .i_a(i_a[1]),
    .i_b(i_b[1]),
    .i_cin(w_c1),
    .o_s(o_s[1]),
    .o_c(w_c2)
  ),
  
  fa3(
    .i_a(i_a[2]),
    .i_b(i_b[2]),
    .i_cin(w_c2),
    .o_s(o_s[2]),
    .o_c(w_c3)
  ),
  
  fa4(
    .i_a(i_a[3]),
    .i_b(i_b[3]),
    .i_cin(w_c3),
    .o_s(o_s[3]),
    .o_c(o_c)
  );
  
  
  
endmodule


module full_adder(
i_a,
i_b,
i_cin,
o_s,
o_c
);
  
  input i_a, i_b,i_cin   ;
  output o_s, o_c 		 ;
  wire w_s1, w_c1, w_c2  ;
  
  half_adder h1(
    .i_a(i_a),
    .i_b(i_b),
    .o_s(w_s1),
    .o_c(w_c1)
	);
  
   half_adder h2(
    .i_a(w_s1),
     .i_b(i_cin),
    .o_s(o_s),
    .o_c(w_c2)
	);
  
  assign o_c = w_c1 | w_c2;
  
endmodule


module half_adder(
i_a,
i_b,
o_s,
o_c
);
  
  input i_a, i_b ;
  output o_s, o_c;
  
  assign o_s = i_a ^ i_b ;
  assign o_c = i_a & i_b ;
  
endmodule
  
